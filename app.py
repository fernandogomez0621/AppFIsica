"""
============================================================================
APLICACI√ìN PRINCIPAL - Sistema de Riesgo Crediticio con RBM y RAG Educativo
============================================================================

Aplicaci√≥n completa de an√°lisis y predicci√≥n de riesgo crediticio hipotecario 
para Colombia usando Streamlit, con:

1. Simulaci√≥n y an√°lisis de datos crediticios
2. M√°quina de Boltzmann Restringida (RBM) como extractor de caracter√≠sticas
3. Modelos de clasificaci√≥n supervisada
4. Sistema RAG educativo con Groq para aprender sobre RBMs

Autor: Sistema de F√≠sica
Versi√≥n: 1.0.0
"""

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import warnings
import sys
import os
from pathlib import Path

# Agregar el directorio src al path
sys.path.append(str(Path(__file__).parent / "src"))

# Importar m√≥dulos locales
try:
    from src.generar_datos import GeneradorCreditoHipotecarioRealista, generar_datos_credito_realista
except ImportError:
    st.error("‚ùå Error importando el generador de datos. Verifica que generar_datos.py est√© en src/.")

warnings.filterwarnings('ignore')

# ============================================================================
# CONFIGURACI√ìN DE LA P√ÅGINA
# ============================================================================

st.set_page_config(
    page_title="üè¶ Sistema de Riesgo Crediticio con RBM",
    page_icon="üè¶",
    layout="wide",
    initial_sidebar_state="expanded",
    menu_items={
        'Get Help': 'https://github.com/tu-repo/help',
        'Report a bug': 'https://github.com/tu-repo/issues',
        'About': """
        # Sistema de Riesgo Crediticio con RBM
        
        Aplicaci√≥n completa para an√°lisis de riesgo crediticio hipotecario
        con M√°quinas de Boltzmann Restringidas y sistema RAG educativo.
        
        **Autor:**
        Andr√©s Fernando G√≥mez Rojas
        Pregrado en F√≠sica
        Universidad Distrital Francisco Jos√© de Caldas
        
        **Director:**
        Carlos Andr√©s G√≥mez Vasco
        
        **Caracter√≠sticas:**
        - Generaci√≥n de datos sint√©ticos realistas
        - An√°lisis exploratorio avanzado
        - M√°quinas de Boltzmann Restringidas (RBM)
        - Modelos de Machine Learning supervisados
        - Sistema RAG educativo con papers cient√≠ficos
        
        **Versi√≥n:** 1.0.0
        """
    }
)

# ============================================================================
# FUNCIONES AUXILIARES
# ============================================================================

@st.cache_data
def load_sample_data():
    """Carga datos de muestra para demostraci√≥n"""
    try:
        # Intentar cargar datos existentes
        if os.path.exists("data/processed/datos_credito_hipotecario_realista.csv"):
            return pd.read_csv("data/processed/datos_credito_hipotecario_realista.csv")
        else:
            return None
    except Exception as e:
        st.error(f"Error cargando datos: {e}")
        return None

def show_app_info():
    """Muestra informaci√≥n general de la aplicaci√≥n"""
    st.markdown("""
    ## üéØ Objetivo del Proyecto
    
    Crear un sistema integral que permita:
    
    - üìä **Generar/cargar datos** de solicitudes de cr√©dito hipotecario
    - üìà **Realizar an√°lisis exploratorio** avanzado
    - ‚öôÔ∏è **Aplicar ingenier√≠a de caracter√≠sticas** autom√°tica
    - üß† **Entrenar modelos predictivos** con RBM + clasificadores
    - üîÆ **Predecir riesgo crediticio** en nuevos solicitantes
    - üéì **Aprender sobre M√°quinas de Boltzmann** mediante un asistente RAG
    
    ## üìã Variables del Sistema
    
    ### Variables Financieras del Cr√©dito:
    - `valor_inmueble`: Valor comercial de la propiedad (COP)
    - `monto_credito`: Monto solicitado del pr√©stamo (COP)
    - `cuota_inicial`: Porcentaje de cuota inicial (%)
    - `plazo_credito`: Plazo del cr√©dito en a√±os
    - `tasa_interes`: Tasa de inter√©s anual (%)
    
    ### Perfil Financiero del Solicitante:
    - `puntaje_datacredito`: Score crediticio (150-950)
    - `salario_mensual`: Ingreso mensual (COP)
    - `egresos_mensuales`: Gastos mensuales totales (COP)
    - `saldo_promedio_banco`: Saldo promedio √∫ltimos 6 meses (COP)
    - `patrimonio_total`: Patrimonio neto (COP)
    - `numero_propiedades`: Cantidad de propiedades que posee
    - `numero_demandas`: Demandas legales por dinero
    
    ### Variable Objetivo:
    - `nivel_riesgo`: **Bajo** / **Medio** / **Alto**
    """)

def render_home():
    """Renderiza la p√°gina de inicio"""
    st.title("üè¶ Sistema de Riesgo Crediticio con RBM")
    st.markdown("### *An√°lisis Predictivo + M√°quinas de Boltzmann + RAG Educativo*")
    
    # M√©tricas principales
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            label="üéØ Precisi√≥n Objetivo",
            value="95%+",
            help="Precisi√≥n esperada del modelo RBM + Clasificador"
        )
    
    with col2:
        st.metric(
            label="üìä Variables",
            value="50+",
            help="Variables originales + caracter√≠sticas ingenierizadas"
        )
    
    with col3:
        st.metric(
            label="üß† Modelos",
            value="9",
            help="Diferentes algoritmos de ML implementados"
        )
    
    with col4:
        st.metric(
            label="üìö Papers",
            value="15+",
            help="Papers cient√≠ficos en el sistema RAG"
        )
    
    st.divider()
    
    # Informaci√≥n de la aplicaci√≥n
    show_app_info()
    
    # Estado del sistema
    st.divider()
    st.subheader("üìä Estado del Sistema")
    
    # Verificar datos
    sample_data = load_sample_data()
    if sample_data is not None:
        st.success(f"‚úÖ Datos cargados: {len(sample_data):,} registros")
        
        # Mostrar distribuci√≥n de riesgo
        if 'nivel_riesgo' in sample_data.columns:
            fig = px.pie(
                sample_data, 
                names='nivel_riesgo',
                title="Distribuci√≥n de Nivel de Riesgo",
                color_discrete_map={
                    'Bajo': '#28a745',
                    'Medio': '#ffc107', 
                    'Alto': '#dc3545'
                }
            )
            st.plotly_chart(fig, use_container_width=True)
    else:
        st.warning("‚ö†Ô∏è No hay datos cargados. Ve a 'Generar Datos' para crear un dataset.")
    
    # Verificar modelos
    if os.path.exists("models/"):
        model_files = list(Path("models").rglob("*.pkl"))
        if model_files:
            st.success(f"‚úÖ Modelos entrenados: {len(model_files)}")
        else:
            st.info("‚ÑπÔ∏è No hay modelos entrenados a√∫n.")
    
    # Verificar papers
    if os.path.exists("articles/"):
        pdf_files = list(Path("articles").glob("*.pdf"))
        if pdf_files:
            st.success(f"‚úÖ Papers cient√≠ficos: {len(pdf_files)}")
        else:
            st.info("‚ÑπÔ∏è No hay papers cargados. Ve a 'Aprende sobre RBMs' para agregar papers.")

def render_data_generator():
    """Renderiza el m√≥dulo de generaci√≥n de datos"""
    st.title("üìä Generador de Datos Sint√©ticos")
    st.markdown("### *Genera datasets realistas de cr√©dito hipotecario para Colombia*")
    
    # Configuraci√≥n
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.subheader("‚öôÔ∏è Configuraci√≥n del Dataset")
        
        n_registros = st.slider(
            "N√∫mero de registros",
            min_value=1000,
            max_value=50000,
            value=10000,
            step=1000,
            help="Cantidad de solicitudes de cr√©dito a generar"
        )
        
        semilla = st.number_input(
            "Semilla aleatoria",
            min_value=1,
            max_value=9999,
            value=42,
            help="Para reproducibilidad de resultados"
        )
        
        col_export1, col_export2 = st.columns(2)
        with col_export1:
            exportar_csv = st.checkbox("Exportar CSV", value=True)
        with col_export2:
            exportar_metadata = st.checkbox("Exportar Metadata", value=True)
    
    with col2:
        st.subheader("üìà Distribuci√≥n Objetivo")
        st.markdown("""
        **Distribuci√≥n Realista:**
        - üü¢ **Bajo:** 60%
        - üü° **Medio:** 25% 
        - üî¥ **Alto:** 15%
        
        **Caracter√≠sticas:**
        - ‚úÖ Correlaciones realistas
        - ‚úÖ Capacidad residual positiva
        - ‚úÖ DTI m√°ximo 35%
        - ‚úÖ Valores colombianos
        """)
    
    # Bot√≥n de generaci√≥n
    if st.button("üöÄ Generar Dataset", type="primary", use_container_width=True):
        with st.spinner("‚è≥ Generando datos sint√©ticos..."):
            try:
                # Generar datos
                df = generar_datos_credito_realista(
                    n_registros=n_registros,
                    semilla=semilla,
                    exportar_csv=exportar_csv,
                    exportar_metadata=exportar_metadata
                )
                
                # Guardar en directorio de datos procesados
                os.makedirs("data/processed", exist_ok=True)
                df.to_csv("data/processed/datos_credito_hipotecario_realista.csv", index=False)
                
                st.success(f"‚úÖ Dataset generado exitosamente: {len(df):,} registros")
                
                # Mostrar estad√≠sticas
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.metric("Total Registros", f"{len(df):,}")
                
                with col2:
                    st.metric("Variables", len(df.columns))
                
                with col3:
                    riesgo_dist = df['nivel_riesgo'].value_counts(normalize=True) * 100
                    st.metric("Riesgo Bajo", f"{riesgo_dist.get('Bajo', 0):.1f}%")
                
                # Mostrar muestra
                st.subheader("üìã Muestra de Datos Generados")
                st.dataframe(
                    df.head(10),
                    use_container_width=True,
                    height=400
                )
                
                # Gr√°ficos de distribuci√≥n
                st.subheader("üìä Distribuciones Principales")
                
                col1, col2 = st.columns(2)
                
                with col1:
                    # Distribuci√≥n de riesgo
                    fig_riesgo = px.pie(
                        df, 
                        names='nivel_riesgo',
                        title="Distribuci√≥n de Nivel de Riesgo",
                        color_discrete_map={
                            'Bajo': '#28a745',
                            'Medio': '#ffc107', 
                            'Alto': '#dc3545'
                        }
                    )
                    st.plotly_chart(fig_riesgo, use_container_width=True)
                
                with col2:
                    # Distribuci√≥n de salarios
                    fig_salario = px.histogram(
                        df,
                        x='salario_mensual',
                        title="Distribuci√≥n de Salarios",
                        nbins=50,
                        labels={'salario_mensual': 'Salario Mensual (COP)'}
                    )
                    fig_salario.update_layout(showlegend=False)
                    st.plotly_chart(fig_salario, use_container_width=True)
                
            except Exception as e:
                st.error(f"‚ùå Error generando datos: {e}")
                st.exception(e)

def render_placeholder_module(title, description, features):
    """Renderiza un m√≥dulo placeholder"""
    st.title(title)
    st.markdown(f"### *{description}*")
    
    st.info("üöß **M√≥dulo en construcci√≥n**")
    
    st.markdown("**Caracter√≠sticas planificadas:**")
    for feature in features:
        st.markdown(f"- {feature}")
    
    st.markdown("---")
    st.markdown("üí° **Pr√≥ximamente:** Este m√≥dulo estar√° disponible en la pr√≥xima versi√≥n.")

# ============================================================================
# NAVEGACI√ìN PRINCIPAL
# ============================================================================

def main():
    """Funci√≥n principal de la aplicaci√≥n"""
    
    # Sidebar de navegaci√≥n
    with st.sidebar:
        st.title("üè¶ Navegaci√≥n")
        st.markdown("---")
        
        page = st.radio(
            "Selecciona un m√≥dulo:",
            [
                "üè† Inicio",
                "üìä Generar Datos",
                "üìÅ Cargar Datos",
                "üìà An√°lisis Descriptivo",
                "üîß Ingenier√≠a de Caracter√≠sticas",
                "üéØ Clustering",
                "‚ö° M√°quina de Boltzmann (RBM)",
                "ü§ñ Modelos Supervisados",
                "üìä Comparaci√≥n de Modelos",
                "üîÆ Predicci√≥n",
                "üîÑ Re-entrenamiento",
                "üéì Aprende sobre RBMs",
                "üìö Documentaci√≥n"
            ],
            key="navigation"
        )
        
        st.markdown("---")
        
        # Informaci√≥n del sistema
        st.markdown("### üìä Estado del Sistema")
        
        # Verificar datos
        if os.path.exists("data/processed/datos_credito_hipotecario_realista.csv"):
            try:
                df = pd.read_csv("data/processed/datos_credito_hipotecario_realista.csv")
                st.success(f"‚úÖ Datos: {len(df):,} registros")
            except:
                st.warning("‚ö†Ô∏è Error cargando datos")
        else:
            st.warning("‚ö†Ô∏è Sin datos")
        
        # Verificar modelos
        model_files = list(Path("models").rglob("*.pkl")) if os.path.exists("models") else []
        if model_files:
            st.success(f"‚úÖ Modelos: {len(model_files)}")
        else:
            st.info("‚ÑπÔ∏è Sin modelos")
        
        # Verificar papers
        pdf_files = list(Path("articles").glob("*.pdf")) if os.path.exists("articles") else []
        if pdf_files:
            st.success(f"‚úÖ Papers: {len(pdf_files)}")
        else:
            st.info("‚ÑπÔ∏è Sin papers")
    
    # Renderizar p√°gina seleccionada
    if page == "üè† Inicio":
        render_home()
    
    elif page == "üìä Generar Datos":
        render_data_generator()
    
    elif page == "üìÅ Cargar Datos":
        # Importar y renderizar el m√≥dulo de procesamiento de datos
        try:
            from src.data_processor import render_data_processor_module
            render_data_processor_module()
        except ImportError:
            st.error("‚ùå Error importando el m√≥dulo de procesamiento de datos")
            render_placeholder_module(
                "üìÅ Cargar Datos",
                "Carga y validaci√≥n de datasets externos",
                [
                    "üì§ Carga de archivos CSV, Excel, Parquet",
                    "‚úÖ Validaci√≥n autom√°tica de datos",
                    "üîç Detecci√≥n de outliers y valores faltantes",
                    "üìä Reporte de calidad de datos",
                    "üîß Limpieza y preprocesamiento autom√°tico"
                ]
            )
    
    elif page == "üìà An√°lisis Descriptivo":
        # Crear tabs para an√°lisis univariado y bivariado
        analysis_tab1, analysis_tab2 = st.tabs(["üìä An√°lisis Univariado", "üîó An√°lisis Bivariado"])
        
        with analysis_tab1:
            # Importar y renderizar el m√≥dulo de an√°lisis univariado
            try:
                from src.univariate_analysis import render_univariate_module
                render_univariate_module()
            except ImportError:
                st.error("‚ùå Error importando el m√≥dulo de an√°lisis univariado")
        
        with analysis_tab2:
            # Importar y renderizar el m√≥dulo de an√°lisis bivariado
            try:
                from src.bivariate_analysis import render_bivariate_module
                render_bivariate_module()
            except ImportError:
                st.error("‚ùå Error importando el m√≥dulo de an√°lisis bivariado")
    
    elif page == "üîß Ingenier√≠a de Caracter√≠sticas":
        # Importar y renderizar el m√≥dulo de ingenier√≠a de caracter√≠sticas
        try:
            from src.feature_engineering import render_feature_engineering_module
            render_feature_engineering_module()
        except ImportError:
            st.error("‚ùå Error importando el m√≥dulo de ingenier√≠a de caracter√≠sticas")
            render_placeholder_module(
                "üîß Ingenier√≠a de Caracter√≠sticas",
                "Creaci√≥n autom√°tica de variables derivadas",
                [
                    "üí∞ Ratios financieros (LTV, DTI, etc.)",
                    "üìä Indicadores de riesgo",
                    "üîó Variables de interacci√≥n",
                    "üìà Transformaciones matem√°ticas",
                    "üéØ Binning y discretizaci√≥n inteligente"
                ]
            )
    
    elif page == "üéØ Clustering":
        # Importar y renderizar el m√≥dulo de clustering
        try:
            from src.clustering import render_clustering_module
            render_clustering_module()
        except ImportError:
            st.error("‚ùå Error importando el m√≥dulo de clustering")
            render_placeholder_module(
                "üéØ Clustering",
                "Segmentaci√≥n de solicitantes en grupos homog√©neos",
                [
                    "üîç Determinaci√≥n autom√°tica de K √≥ptimo",
                    "üìä M√∫ltiples algoritmos (K-Means, Hierarchical, DBSCAN)",
                    "üìà Visualizaciones PCA 2D/3D interactivas",
                    "üìã Perfiles detallados por cluster",
                    "üéØ Etiquetado autom√°tico de riesgo"
                ]
            )
    
    elif page == "‚ö° M√°quina de Boltzmann (RBM)":
        # Importar y renderizar el m√≥dulo RBM
        try:
            from src.rbm_model import render_rbm_module
            render_rbm_module()
        except ImportError:
            st.error("‚ùå Error importando el m√≥dulo RBM")
            render_placeholder_module(
                "‚ö° M√°quina de Boltzmann Restringida",
                "Extracci√≥n de caracter√≠sticas latentes con RBM",
                [
                    "üß† Implementaci√≥n completa de RBM desde cero",
                    "‚ö° Algoritmo Contrastive Divergence (CD-k)",
                    "üìä M√©tricas de evaluaci√≥n (error reconstrucci√≥n, pseudo log-likelihood)",
                    "üé® Visualizaciones de pesos y activaciones",
                    "üîß Hiperpar√°metros configurables interactivamente"
                ]
            )
    
    elif page == "ü§ñ Modelos Supervisados":
        # Importar y renderizar el m√≥dulo de modelos supervisados
        try:
            from src.supervised_models import render_supervised_models_module
            render_supervised_models_module()
        except ImportError:
            st.error("‚ùå Error importando el m√≥dulo de modelos supervisados")
            render_placeholder_module(
                "ü§ñ Modelos Supervisados",
                "Entrenamiento y evaluaci√≥n de modelos de clasificaci√≥n",
                [
                    "üéØ 6 algoritmos diferentes (Logistic, RF, XGBoost, etc.)",
                    "üìä Evaluaci√≥n completa con m√∫ltiples m√©tricas",
                    "üîß Optimizaci√≥n autom√°tica de hiperpar√°metros",
                    "üíæ Versionado y persistencia de modelos",
                    "üîç An√°lisis de importancia de caracter√≠sticas"
                ]
            )
    
    elif page == "üìä Comparaci√≥n de Modelos":
        # Usar el mismo m√≥dulo de modelos supervisados para comparaci√≥n
        try:
            from src.supervised_models import render_supervised_models_module
            st.info("üí° La comparaci√≥n de modelos est√° integrada en 'Modelos Supervisados'")
            render_supervised_models_module()
        except ImportError:
            render_placeholder_module(
                "üìä Comparaci√≥n de Modelos",
                "An√°lisis comparativo de rendimiento de modelos",
                [
                    "üìà Tablas comparativas de m√©tricas",
                    "üìä Gr√°ficos de barras y curvas ROC",
                    "üèÜ Ranking autom√°tico de modelos",
                    "üìã Tests estad√≠sticos de significancia",
                    "üéØ Selecci√≥n del mejor modelo para producci√≥n"
                ]
            )
    
    elif page == "üîÆ Predicci√≥n":
        # Importar y renderizar el m√≥dulo de predicci√≥n
        try:
            from src.prediction import render_prediction_module
            render_prediction_module()
        except ImportError:
            st.error("‚ùå Error importando el m√≥dulo de predicci√≥n")
            render_placeholder_module(
                "üîÆ Predicci√≥n",
                "Sistema de predicci√≥n de riesgo crediticio",
                [
                    "üìù Formulario interactivo para nuevos solicitantes",
                    "‚úÖ Validaciones en tiempo real",
                    "üéØ Predicciones con probabilidades por clase",
                    "üìä Explicaciones de factores de riesgo",
                    "üìÅ Modo batch para m√∫ltiples predicciones"
                ]
            )
    
    elif page == "üîÑ Re-entrenamiento":
        # Importar y renderizar el m√≥dulo de re-entrenamiento
        try:
            from src.retraining import render_retraining_module
            render_retraining_module()
        except ImportError as e:
            st.error(f"‚ùå Error importando el m√≥dulo de re-entrenamiento: {e}")
            render_placeholder_module(
                "üîÑ Re-entrenamiento",
                "Actualizaci√≥n de modelos con nuevos datos",
                [
                    "üìä Detecci√≥n autom√°tica de data drift",
                    "üîÑ Re-entrenamiento incremental",
                    "üìà Versionado de modelos",
                    "üìä Comparaci√≥n antes/despu√©s",
                    "üîô Sistema de rollback"
                ]
            )
    
    elif page == "üéì Aprende sobre RBMs":
        # Importar y renderizar el m√≥dulo RAG funcional
        try:
            from src.educational_rag import render_educational_rag_module
            render_educational_rag_module()
        except ImportError as e:
            st.error(f"‚ùå Error importando el m√≥dulo RAG educativo: {e}")
            render_placeholder_module(
                "üéì Aprende sobre RBMs",
                "Sistema RAG educativo con papers cient√≠ficos",
                [
                    "ü§ñ Chat interactivo con Groq AI (Llama 3.3 70B)",
                    "üìö Base de conocimiento con papers cient√≠ficos",
                    "üîç B√∫squeda sem√°ntica con embeddings",
                    "üì§ Carga autom√°tica de PDFs",
                    "üí¨ Preguntas sugeridas por nivel"
                ]
            )
    
    elif page == "üìö Documentaci√≥n":
        st.title("üìö Documentaci√≥n")
        
        st.markdown("""
        ## üìñ Documentaci√≥n en Sphinx
        
        Toda la documentaci√≥n del c√≥digo, manual de uso e instalaci√≥n est√°n disponibles en Sphinx.
        
        ## üë• Autores
        
        **Autor:**
        Andr√©s Fernando G√≥mez Rojas
        Pregrado en F√≠sica
        Universidad Distrital Francisco Jos√© de Caldas
        
        **Director:**
        Carlos Andr√©s G√≥mez Vasco
        """)

# ============================================================================
# EJECUCI√ìN PRINCIPAL
# ============================================================================

if __name__ == "__main__":
    main()